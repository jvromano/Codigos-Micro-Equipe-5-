
teste comando at.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000001f8  0000026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009b5  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000728  00000000  00000000  00000cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034e  00000000  00000000  0000141d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  0000176c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b8  00000000  00000000  000017f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002c2  00000000  00000000  00001cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001f72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ef       	ldi	r30, 0xF8	; 248
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <main>
  8e:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <_Z13USART_Iniciarmm>:
#define BAUD 9600

#define HC12_TX PD5
#define HC12_RX PD4

void USART_Iniciar(uint32_t baud, uint32_t freq_cpu) {
  96:	cf 92       	push	r12
  98:	df 92       	push	r13
  9a:	ef 92       	push	r14
  9c:	ff 92       	push	r15
  9e:	6b 01       	movw	r12, r22
  a0:	7c 01       	movw	r14, r24
	uint16_t myubrr = freq_cpu / 16 / baud - 1;
  a2:	ca 01       	movw	r24, r20
  a4:	b9 01       	movw	r22, r18
  a6:	68 94       	set
  a8:	13 f8       	bld	r1, 3
  aa:	96 95       	lsr	r25
  ac:	87 95       	ror	r24
  ae:	77 95       	ror	r23
  b0:	67 95       	ror	r22
  b2:	16 94       	lsr	r1
  b4:	d1 f7       	brne	.-12     	; 0xaa <_Z13USART_Iniciarmm+0x14>
  b6:	a7 01       	movw	r20, r14
  b8:	96 01       	movw	r18, r12
  ba:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__udivmodsi4>
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	31 09       	sbc	r19, r1
	UBRR0H = (uint8_t)(myubrr >> 8);
  c2:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)myubrr;
  c6:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0A = 0;
  ca:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
  ce:	88 e1       	ldi	r24, 0x18	; 24
  d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
}
  da:	ff 90       	pop	r15
  dc:	ef 90       	pop	r14
  de:	df 90       	pop	r13
  e0:	cf 90       	pop	r12
  e2:	08 95       	ret

000000e4 <_Z16USART_Transmitirh>:

void USART_Transmitir(unsigned char dado) {
	while (!(UCSR0A & (1 << UDRE0)));
  e4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  e8:	95 ff       	sbrs	r25, 5
  ea:	fc cf       	rjmp	.-8      	; 0xe4 <_Z16USART_Transmitirh>
	UDR0 = dado;
  ec:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  f0:	08 95       	ret

000000f2 <_Z12HC12_ComandoPKc>:
}

void HC12_Comando(const char* comando) {
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	8c 01       	movw	r16, r24
	for (int i = 0; comando[i] != '\0'; ++i) {
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	f8 01       	movw	r30, r16
 102:	ec 0f       	add	r30, r28
 104:	fd 1f       	adc	r31, r29
 106:	80 81       	ld	r24, Z
 108:	88 23       	and	r24, r24
 10a:	21 f0       	breq	.+8      	; 0x114 <_Z12HC12_ComandoPKc+0x22>
		USART_Transmitir(comando[i]);
 10c:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z16USART_Transmitirh>
	while (!(UCSR0A & (1 << UDRE0)));
	UDR0 = dado;
}

void HC12_Comando(const char* comando) {
	for (int i = 0; comando[i] != '\0'; ++i) {
 110:	21 96       	adiw	r28, 0x01	; 1
 112:	f6 cf       	rjmp	.-20     	; 0x100 <_Z12HC12_ComandoPKc+0xe>
		USART_Transmitir(comando[i]);
	}
	USART_Transmitir('\r');
 114:	8d e0       	ldi	r24, 0x0D	; 13
 116:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z16USART_Transmitirh>
}
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	08 95       	ret

00000124 <_Z17HC12_Configuracaov>:

void HC12_Configuracao() {
	DDRD |= (1 << HC12_TX);
 124:	8a b1       	in	r24, 0x0a	; 10
 126:	80 62       	ori	r24, 0x20	; 32
 128:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << HC12_RX);
 12a:	8a b1       	in	r24, 0x0a	; 10
 12c:	8f 7e       	andi	r24, 0xEF	; 239
 12e:	8a b9       	out	0x0a, r24	; 10

	USART_Iniciar(BAUD, F_CPU);
 130:	20 e0       	ldi	r18, 0x00	; 0
 132:	34 e2       	ldi	r19, 0x24	; 36
 134:	44 ef       	ldi	r20, 0xF4	; 244
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	60 e8       	ldi	r22, 0x80	; 128
 13a:	75 e2       	ldi	r23, 0x25	; 37
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 4b 00 	call	0x96	; 0x96 <_Z13USART_Iniciarmm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	2f e3       	ldi	r18, 0x3F	; 63
 146:	8d e0       	ldi	r24, 0x0D	; 13
 148:	93 e0       	ldi	r25, 0x03	; 3
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <_Z17HC12_Configuracaov+0x26>
 152:	00 c0       	rjmp	.+0      	; 0x154 <_Z17HC12_Configuracaov+0x30>
 154:	00 00       	nop

	_delay_ms(1000);

	HC12_Comando("AT+DEFAULT");
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z12HC12_ComandoPKc>
 15e:	87 ea       	ldi	r24, 0xA7	; 167
 160:	91 e6       	ldi	r25, 0x61	; 97
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <_Z17HC12_Configuracaov+0x3e>
 166:	00 c0       	rjmp	.+0      	; 0x168 <_Z17HC12_Configuracaov+0x44>
 168:	00 00       	nop
	_delay_ms(100);
	HC12_Comando("AT+B9600");
 16a:	8b e0       	ldi	r24, 0x0B	; 11
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z12HC12_ComandoPKc>
 172:	87 ea       	ldi	r24, 0xA7	; 167
 174:	91 e6       	ldi	r25, 0x61	; 97
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <_Z17HC12_Configuracaov+0x52>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <_Z17HC12_Configuracaov+0x58>
 17c:	00 00       	nop
	_delay_ms(100);
	HC12_Comando("AT+C001");
 17e:	84 e1       	ldi	r24, 0x14	; 20
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z12HC12_ComandoPKc>
 186:	87 ea       	ldi	r24, 0xA7	; 167
 188:	91 e6       	ldi	r25, 0x61	; 97
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <_Z17HC12_Configuracaov+0x66>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <_Z17HC12_Configuracaov+0x6c>
 190:	00 00       	nop
	_delay_ms(100);
	HC12_Comando("AT+FU3");
 192:	8c e1       	ldi	r24, 0x1C	; 28
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z12HC12_ComandoPKc>
 19a:	87 ea       	ldi	r24, 0xA7	; 167
 19c:	91 e6       	ldi	r25, 0x61	; 97
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <_Z17HC12_Configuracaov+0x7a>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <_Z17HC12_Configuracaov+0x80>
 1a4:	00 00       	nop
 1a6:	08 95       	ret

000001a8 <main>:
	_delay_ms(100);
}

int main(void) {
	HC12_Configuracao();
 1a8:	0e 94 92 00 	call	0x124	; 0x124 <_Z17HC12_Configuracaov>
	sei();
 1ac:	78 94       	sei
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <main+0x6>

000001b0 <__udivmodsi4>:
 1b0:	a1 e2       	ldi	r26, 0x21	; 33
 1b2:	1a 2e       	mov	r1, r26
 1b4:	aa 1b       	sub	r26, r26
 1b6:	bb 1b       	sub	r27, r27
 1b8:	fd 01       	movw	r30, r26
 1ba:	0d c0       	rjmp	.+26     	; 0x1d6 <__udivmodsi4_ep>

000001bc <__udivmodsi4_loop>:
 1bc:	aa 1f       	adc	r26, r26
 1be:	bb 1f       	adc	r27, r27
 1c0:	ee 1f       	adc	r30, r30
 1c2:	ff 1f       	adc	r31, r31
 1c4:	a2 17       	cp	r26, r18
 1c6:	b3 07       	cpc	r27, r19
 1c8:	e4 07       	cpc	r30, r20
 1ca:	f5 07       	cpc	r31, r21
 1cc:	20 f0       	brcs	.+8      	; 0x1d6 <__udivmodsi4_ep>
 1ce:	a2 1b       	sub	r26, r18
 1d0:	b3 0b       	sbc	r27, r19
 1d2:	e4 0b       	sbc	r30, r20
 1d4:	f5 0b       	sbc	r31, r21

000001d6 <__udivmodsi4_ep>:
 1d6:	66 1f       	adc	r22, r22
 1d8:	77 1f       	adc	r23, r23
 1da:	88 1f       	adc	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	1a 94       	dec	r1
 1e0:	69 f7       	brne	.-38     	; 0x1bc <__udivmodsi4_loop>
 1e2:	60 95       	com	r22
 1e4:	70 95       	com	r23
 1e6:	80 95       	com	r24
 1e8:	90 95       	com	r25
 1ea:	9b 01       	movw	r18, r22
 1ec:	ac 01       	movw	r20, r24
 1ee:	bd 01       	movw	r22, r26
 1f0:	cf 01       	movw	r24, r30
 1f2:	08 95       	ret

000001f4 <_exit>:
 1f4:	f8 94       	cli

000001f6 <__stop_program>:
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <__stop_program>
